#!/usr/bin/env python3
"""Basic usage example for MCP-PPTX server."""

import asyncio
import json
import sys
from pathlib import Path

# Add src to path for development
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from mcp_pptx.models.deck_spec import (
    DeckSpec, SlideSpec, SlideContent, LayoutType, ContentType,
    OutputSpec, FooterSpec
)
from mcp_pptx.models.theme_spec import (
    ThemeSpec, ScrapedTheme, ColorPalette, FontPalette
)
from mcp_pptx.rendering.renderer import PresentationRenderer
from mcp_pptx.extraction.theme_extractor import ThemeExtractor
from mcp_pptx.tools.validator import DeckValidator


async def create_sample_presentation():
    """Create a sample presentation without web scraping."""
    print("Creating sample presentation...")
    
    # Create a simple theme
    colors = ColorPalette(
        primary="#005596",
        secondary="#0A77C0",
        accent="#FF5733",
        background="#FFFFFF",
        text="#333333"
    )
    
    fonts = FontPalette(
        heading="Calibri Light",
        body="Arial"
    )
    
    scraped_theme = ScrapedTheme(
        colors=colors,
        fonts=fonts,
        source_url="https://example.com",
        warnings=[]
    )
    
    theme = ThemeSpec(scraped=scraped_theme)
    
    # Create slides
    slides = [
        # Title slide
        SlideSpec(
            title="MCP-PPTX Demo",
            subtitle="Automated PowerPoint Generation",
            layout=LayoutType.TITLE,
            content=[],
            speaker_notes="This is the title slide of our demo presentation."
        ),
        
        # Content slide with bullets
        SlideSpec(
            title="Key Features",
            layout=LayoutType.TITLE_CONTENT,
            content=[
                SlideContent(
                    type=ContentType.BULLETS,
                    bullets=[
                        "Web theme extraction using Playwright",
                        "Automated PowerPoint generation",
                        "Theme application with colors and fonts",
                        "Asset caching for images and resources",
                        "Comprehensive validation and error handling"
                    ]
                )
            ],
            speaker_notes="These are the main features of the MCP-PPTX server."
        ),
        
        # Text content slide
        SlideSpec(
            title="Architecture Overview",
            layout=LayoutType.TITLE_CONTENT,
            content=[
                SlideContent(
                    type=ContentType.TEXT,
                    text="The MCP-PPTX server implements a modular architecture with separate components for theme extraction, presentation rendering, validation, and asset management. This design ensures maintainability and extensibility."
                )
            ],
            speaker_notes="The architecture is designed to be modular and extensible."
        ),
        
        # Section slide
        SlideSpec(
            title="Thank You",
            layout=LayoutType.SECTION,
            content=[],
            speaker_notes="This concludes our demo presentation."
        )
    ]
    
    # Create deck specification
    deck_spec = DeckSpec(
        title="MCP-PPTX Demo Presentation",
        subtitle="Automated PowerPoint Generation with Web Theme Extraction",
        author="Claude AI Assistant",
        theme=theme,
        slides=slides,
        output=OutputSpec(
            filename="mcp_pptx_demo.pptx",
            directory="./output"
        ),
        footer=FooterSpec(
            text="Generated by MCP-PPTX",
            show_slide_numbers=True,
            show_date=False
        )
    )
    
    # Validate the deck
    print("Validating deck specification...")
    validator = DeckValidator()
    validation_result = await validator.validate_deck(deck_spec)
    
    print(f"Validation result: {'PASSED' if validation_result.valid else 'FAILED'}")
    if validation_result.warnings:
        print("Warnings:")
        for warning in validation_result.warnings:
            print(f"  - {warning}")
    
    if validation_result.suggestions:
        print("Suggestions:")
        for suggestion in validation_result.suggestions:
            print(f"  - {suggestion}")
    
    if validation_result.errors:
        print("Errors:")
        for error in validation_result.errors:
            print(f"  - {error}")
        return
    
    # Generate the presentation
    print("Generating presentation...")
    renderer = PresentationRenderer()
    result = await renderer.generate_presentation(deck_spec)
    
    if result["ok"]:
        print(f"‚úÖ Presentation generated successfully!")
        print(f"üìÅ Output file: {result['output']}")
        print(f"üìä Slides generated: {result['slides_generated']}")
        
        if result["warnings"]:
            print("‚ö†Ô∏è  Warnings:")
            for warning in result["warnings"]:
                print(f"  - {warning}")
    else:
        print(f"‚ùå Failed to generate presentation: {result.get('error', 'Unknown error')}")


async def demo_theme_extraction():
    """Demo theme extraction from a website."""
    print("\n" + "="*50)
    print("Demo: Theme Extraction")
    print("="*50)
    
    # This would normally extract from a real website
    # For demo purposes, we'll show what the result would look like
    print("Note: This demo shows what theme extraction would return.")
    print("To test with real websites, ensure Playwright is installed and configured.\n")
    
    extractor = ThemeExtractor()
    
    # Simulate a theme extraction result
    sample_theme = ScrapedTheme(
        colors=ColorPalette(
            primary="#1E40AF",
            secondary="#3B82F6",
            accent="#F59E0B",
            background="#FFFFFF",
            text="#1F2937"
        ),
        fonts=FontPalette(
            heading="Calibri Light",
            body="Arial",
            heading_web="Inter",
            body_web="Open Sans"
        ),
        source_url="https://example.com",
        warnings=["Derived secondary color from primary", "Logo extraction skipped for demo"]
    )
    
    print("Sample extracted theme:")
    theme_dict = sample_theme.model_dump()
    # Convert HttpUrl to string for JSON serialization
    theme_dict['source_url'] = str(theme_dict['source_url'])
    print(json.dumps(theme_dict, indent=2))


async def main():
    """Run the demo."""
    print("MCP-PPTX Server Demo")
    print("="*50)
    
    try:
        await create_sample_presentation()
        await demo_theme_extraction()
        
    except Exception as e:
        print(f"Demo failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())